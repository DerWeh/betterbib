#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
from __future__ import print_function, unicode_literals

import argparse
import collections
from io import open as io_open
import sys

# pylint: disable=import-self
import betterbib
from betterbib import pybtex_to_bibtex_string

from pybtex.database.input import bibtex
from tqdm import tqdm


def _main():
    args = _parse_cmd_arguments()
    infile = args.infile

    parser = bibtex.Parser()
    data = parser.parse_file(infile)

    n = len(data.entries)

    sources = [betterbib.Crossref(args.long_journal_name)]

    print('Reading from: {}'.format(infile))
    print('Saving to: {}\n'.format(args.outfile))

    # Open output file for writing.
    out = io_open(args.outfile, mode='w', encoding='utf-8')

    # Write header to the output file.
    out.write(
        '%%comment{This file was created with betterbib v%s.}\n\n' %
        betterbib.__version__
        )

    # Use an ordered dictionary to make sure that the entries are written out
    # sorted by their BibTeX key if
    od = (
        collections.OrderedDict(sorted(data.entries.items()))
        if args.sort_by_bibkey
        else data.entries
        )

    num_success = 0

    for bib_id, entry in tqdm(od.items()):
        result = None
        for source in sources:
            try:
                result = source.find_unique(entry)
            except (
                    betterbib.crossref.UniqueError,
                    betterbib.crossref.HttpError,
                    ):
                pass
            else:
                num_success += 1
                break

        d = betterbib.bibtex.sanitize_doi_url(result if result else entry)

        a = pybtex_to_bibtex_string(
            d, bib_id, bracket_delimeters=not args.quote_delimeters
            )

        if not result:
            out.write(
                '%comment{Error when fetching the following entry.}\n'
                )

        out.write(a + '\n\n')

    out.close()
    print('\n\nTotal number of entries: {}'.format(n))
    print('Found: {}'.format(num_success))

    return


def _parse_cmd_arguments():
    parser = argparse.ArgumentParser(
        description='Improve BibTeX libraries '
        'with information from online sources.'
        )
    parser.add_argument(
        'infile',
        type=str,
        help='input BibTeX file'
        )
    parser.add_argument(
        'outfile',
        type=str,
        help='output BibTeX file'
        )
    parser.add_argument(
        '--long-journal-name', '-l',
        action='store_true',
        help='prefer long journal names (default: false)'
        )
    parser.add_argument(
        '--quote-delimeters', '-d',
        action='store_true',
        help='use quote delimeters in output file (default: curly brackets)',
        )
    parser.add_argument(
        '--sort-by-bibkey', '-s',
        action='store_true',
        help='sort entries by BibTeX key (default: false)'
        )
    parser.add_argument(
        '--version', '-v',
        help='display version information',
        action='version',
        version='%(prog)s {}, Python {}'.format(
            betterbib.__version__, sys.version
            )
        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
