#!/usr/bin/env python
# -*- coding: utf8 -*-
#
import betterbib

from betterbib import pybtex_to_bibtex_string

import collections
from pybtex.database.input import bibtex
import re
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO


def _main():
    args = _parse_cmd_arguments()
    infile = args.infile

    print('Reading from: %s' % infile)

    data = betterbib.read_bibtex(infile)
    n = len(data.entries)

    print('Number of entries: %d' % n)
    print('Saving to: %s' % args.outfile)
    print

    if args.source == 'crossref':
        source = betterbib.Crossref()
    elif args.source == 'mref':
        source = betterbib.ZentralblattMref()
    elif args.source == 'mathscinet':
        source = betterbib.MathSciNet()
    else:
        raise ValueError('Illegal source \'%s\'.' % args.source)

    # Open output file for writing.
    out = open(args.outfile, 'w')

    # Write header to the output file.
    out.write(
        '%%comment{This file was created with BetterBib v%s.}\n\n' %
        betterbib.__version__
        )

    # Determine progress bar width according to the current console width.
    progress_bar = betterbib.ProgressBar(n)

    # Use an ordered dictionary to make sure that the entries are written out
    # sorted by their BibTeX key.
    od = collections.OrderedDict(sorted(data.entries.items()))

    k = 0
    success_count = 0
    change_count = 0
    for bib_id, entry in od.iteritems():
        k += 1

        # Print a progress bar.
        # 73% [==========================>          ] 143
        progress_bar.show(k)

        # Clean up the title string.
        try:
            entry = source.find_unique(entry)
        except RuntimeError as e:
            # print('Entry not found (\'%s\').' % e.message)
            # Write out the old entry to file.
            a = pybtex_to_bibtex_string(entry, bib_id)
            out.write(
                '%%comment{Error when fetching the following entry (%s).}\n'
                % e.message
                )
            # This write operation may fail if `a` contains non-ASCII
            # characters. It's okay to fail too since this case requires some
            # human interaction anyways.
            try:
                out.write(a.encode('utf8'))
            except:
                # print('\nUnable to write the following entry to an '
                #       'ASCII-encoded file:\n\n %s\n' % a
                #       )
                raise
        else:
            # print('found.')
            # Check if the the fetched entry actually differs from what we
            # already had. This is for stats.
            #parser = bibtex.Parser()
            #parsed_bibtex = \
            #    parser.parse_stream(StringIO(bibtex_entry))
            #assert len(parsed_bibtex.entries) == 1
            #entry = parsed_bibtex.entries[parsed_bibtex.entries.keys()[0]]

            # TODO have legacy sources return proper pybtex entries
            # TODO use pybtex to write bibtex file
            # TODO resurrect following code
            #if betterbib.adds_info(entry.fields, b):
            #    change_count += 1

            ## Make sure that the BibTeX key remains identical.
            #pattern = '(@[a-zA-Z]+)\s*{\w+'
            #bibtex_entry = re.sub(pattern, r'\1{%s' % bib_id, bibtex_entry)
            # Write it out to a file.
            out.write(
                #bibtex_entry.encode('utf8')
                pybtex_to_bibtex_string(entry, bib_id).encode('utf8')
                )
            success_count += 1
        out.write('\n\n')

    out.close()
    print
    print
    print('Total number of entries: %d' % n)
    print('Found in data source:    %d' % success_count)
    print('Corrected entries:       %d' % change_count)
    return


def _parse_cmd_arguments():
    import argparse
    parser = argparse.ArgumentParser(
        description='Improve BibTeX libraries '
        'with information from online sources.'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input BibTeX file'
            )
    parser.add_argument(
            'outfile',
            type=str,
            help='output BibTeX file'
            )
    parser.add_argument(
            '--source', '-s',
            type=str,
            choices=['crossref', 'mref', 'mathscinet'],
            default='crossref',
            help='data source (default: crossref)'
            )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
