#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
from __future__ import unicode_literals
import betterbib
from betterbib import pybtex_to_bibtex_string
from io import open

import collections
from pybtex.database.input import bibtex
import pipdated
from tqdm import tqdm


def _main():
    if pipdated.needs_checking('betterbib'):
        print(pipdated.check('betterbib', betterbib.__version__))

    args = _parse_cmd_arguments()
    infile = args.infile

    parser = bibtex.Parser()
    data = parser.parse_file(infile)

    n = len(data.entries)

    sources = [betterbib.Crossref()]
    source_names = ['crossref']

    print('Reading from: %s' % infile)
    print('Saving to: %s' % args.outfile)
    print

    # Open output file for writing.
    out = open(args.outfile, mode='w', encoding='utf-8')

    # Write header to the output file.
    out.write(
        '%%comment{This file was created with BetterBib v%s.}\n\n' %
        betterbib.__version__
        )

    # Use an ordered dictionary to make sure that the entries are written out
    # sorted by their BibTeX key.
    od = collections.OrderedDict(sorted(data.entries.items()))

    num_success = 0

    for bib_id, entry in tqdm(od.items()):
        result = None
        for source, source_name in zip(sources, source_names):
            # TODO don't make the sources throw when nothing has been found
            try:
                result = source.find_unique(entry)
            except RuntimeError as e:
                pass
            else:
                num_success += 1
                break

        if result:
            # Found; write it out to a file.
            a = pybtex_to_bibtex_string(result, bib_id)
        else:
            # Nothing found; write out the old entry to file.
            a = pybtex_to_bibtex_string(entry, bib_id)
            out.write(
                '%comment{Error when fetching the following entry.}\n'
                )

        out.write(a + '\n\n')

    out.close()
    print
    print
    print('Total number of entries: %d' % n)
    print('Found: %d' % num_success)

    return


def _parse_cmd_arguments():
    import argparse
    parser = argparse.ArgumentParser(
        description='Improve BibTeX libraries '
        'with information from online sources.'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input BibTeX file'
            )
    parser.add_argument(
            'outfile',
            type=str,
            help='output BibTeX file'
            )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
