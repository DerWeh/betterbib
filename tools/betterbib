#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
from __future__ import print_function, unicode_literals

import argparse
import collections
# pylint: disable=import-error
import concurrent.futures
from io import open as io_open
import sys

# pylint: disable=import-self
import betterbib
from betterbib import pybtex_to_bibtex_string
from pybtex.database.input import bibtex
import requests
from tqdm import tqdm


# pylint: disable=too-many-locals
def _main():
    args = _parse_cmd_arguments()
    infile = args.infile

    parser = bibtex.Parser()
    data = parser.parse_file(infile)

    n = len(data.entries)

    print('Reading from: {}'.format(infile))
    print('Saving to: {}\n'.format(args.outfile))

    # Open output file for writing.
    out = io_open(args.outfile, mode='w', encoding='utf-8')

    # Write header to the output file.
    out.write(
        '%%comment{This file was created with betterbib v%s.}\n\n' %
        betterbib.__version__
        )

    # Use an ordered dictionary to make sure that the entries are written out
    # sorted by their BibTeX key if
    od = (
        collections.OrderedDict(sorted(data.entries.items()))
        if args.sort_by_bibkey
        else data.entries
        )

    num_success = 0

    source = betterbib.Crossref(args.long_journal_name)

    # We can use a with statement to ensure threads are cleaned up promptly
    # pylint: disable=bad-continuation
    with concurrent.futures.ThreadPoolExecutor(
            max_workers=args.num_concurrent_requests
            ) as executor:
        # Start the load operations and mark each future with its URL
        responses = {
            executor.submit(source.find_unique, entry): (bib_id, entry)
            for bib_id, entry in od.items()
            }
        with tqdm(total=len(responses)) as pbar:
            for future in concurrent.futures.as_completed(responses):
                bib_id, entry = responses[future]
                data = None
                try:
                    data = future.result()
                except (betterbib.crossref.NotFoundError,
                        betterbib.crossref.UniqueError):
                    pass
                except betterbib.crossref.HttpError as e:
                    print(e.args[0])
                else:
                    num_success += 1

                d = data if data else entry

                if 'url' in d.fields:
                    doi = betterbib.bibtex.doi_from_url(d.fields['url'])
                    if doi:
                        if args.doi_url_type == 'new':
                            # Make sure to use the new DOI URL
                            d.fields['url'] = 'https://doi.org/' + doi
                        elif args.doi_url_type == 'short':
                            url = 'http://shortdoi.org/' + doi
                            r = requests.get(url, params={'format': 'json'})
                            if r.ok:
                                data = r.json()
                                if 'ShortDOI' in data:
                                    d.fields['url'] = \
                                        'https://doi.org/' + data['ShortDOI']

                a = pybtex_to_bibtex_string(
                    d, bib_id, bracket_delimeters=not args.quote_delimeters
                    )

                if not data:
                    out.write(
                        '%comment{Error when fetching the following entry.}\n'
                        )
                out.write(a + '\n\n')

                pbar.update(1)

    out.close()
    print('\n\nTotal number of entries: {}'.format(n))
    print('Found: {}'.format(num_success))

    return


def _parse_cmd_arguments():
    parser = argparse.ArgumentParser(
        description='Improve BibTeX libraries '
        'with information from online sources.'
        )
    parser.add_argument(
        'infile',
        type=str,
        help='input BibTeX file'
        )
    parser.add_argument(
        'outfile',
        type=str,
        help='output BibTeX file'
        )
    parser.add_argument(
        '--long-journal-name', '-l',
        action='store_true',
        help='prefer long journal names (default: false)'
        )
    parser.add_argument(
        '--quote-delimeters', '-d',
        action='store_true',
        help='use quote delimeters in output file (default: curly brackets)',
        )
    parser.add_argument(
        '--sort-by-bibkey', '-s',
        action='store_true',
        help='sort entries by BibTeX key (default: false)'
        )
    parser.add_argument(
        '--num-concurrent-requests', '-c',
        default=10,
        help='number of concurrent HTTPS requests (default: 10)',
        )
    parser.add_argument(
        '--doi-url-type', '-u',
        choices=[
            'unchanged',
            'new',
            'short'
            ],
        default='new',
        help=(
            'DOI URL (new: https://doi.org/<DOI> (default), '
            'short: https://doi.org/abcde)'
            ),
        )
    parser.add_argument(
        '--version', '-v',
        help='display version information',
        action='version',
        version='%(prog)s {}, Python {}'.format(
            betterbib.__version__, sys.version
            )
        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
