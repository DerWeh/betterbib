#!/usr/bin/env python
# -*- coding: utf8 -*-
#
import betterbib

from betterbib import pybtex_to_bibtex_string

import collections


def _main():
    args = _parse_cmd_arguments()
    infile = args.infile

    data = betterbib.read_bibtex(infile)
    n = len(data.entries)

    print('Reading from: %s' % infile)
    print('Number of entries: %d' % n)
    print('Using sources: %s' % ', '.join(args.sources))
    print('Saving to: %s' % args.outfile)
    print

    sources = []
    for s in args.sources:
        if s == 'crossref':
            sources.append(betterbib.Crossref())
        elif s == 'mref':
            sources.append(betterbib.ZentralblattMref())
        else:
            raise ValueError('Illegal source \'%s\'.' % s)

    # Open output file for writing.
    out = open(args.outfile, 'w')

    # Write header to the output file.
    out.write(
        '%%comment{This file was created with BetterBib v%s.}\n\n' %
        betterbib.__version__
        )

    # Determine progress bar width according to the current console width.
    progress_bar = betterbib.ProgressBar(n)

    # Use an ordered dictionary to make sure that the entries are written out
    # sorted by their BibTeX key.
    od = collections.OrderedDict(sorted(data.entries.items()))

    k = 0
    success_by_source = {}
    for source in args.sources:
        success_by_source[source] = 0

    for bib_id, entry in od.iteritems():
        k += 1

        # Print a progress bar.
        # 73% [==========================>          ] 143
        progress_bar.show(k)

        result = None
        for source, source_name in zip(sources, args.sources):
            # TODO don't make the sources throw when nothing has been found
            try:
                result = source.find_unique(entry)
            except RuntimeError as e:
                pass
            else:
                success_by_source[source_name] += 1
                break

        if result:
            # Found; write it out to a file.
            out.write(
                pybtex_to_bibtex_string(result, bib_id).encode('utf8')
                )
        else:
            # Nothing found; write out the old entry to file.
            a = pybtex_to_bibtex_string(entry, bib_id)
            out.write(
                '%%comment{Error when fetching the following entry (%s).}\n'
                % e.message
                )
            out.write(a.encode('utf8'))

        if k != n:
            out.write('\n\n')

    out.close()
    print
    print
    print('Total number of entries: %d' % n)
    print('Found on')
    for source_name, success_count in success_by_source.iteritems():
        print('  %s: %d' % (source_name, success_count))
    return


def _parse_cmd_arguments():
    import argparse
    parser = argparse.ArgumentParser(
        description='Improve BibTeX libraries '
        'with information from online sources.'
        )
    parser.add_argument(
            'infile',
            type=str,
            help='input BibTeX file'
            )
    parser.add_argument(
            'outfile',
            type=str,
            help='output BibTeX file'
            )
    parser.add_argument(
            '--sources', '-s',
            type=str,
            nargs='+',
            choices=['crossref', 'mref'],
            default=['crossref'],
            help='data sources with order '
                 '(default: [crossref])'
            )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
