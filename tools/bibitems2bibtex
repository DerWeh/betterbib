#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  Copyright (c) 2014, Nico Schl√∂mer, <nico.schloemer@gmail.com>
#  All rights reserved.
#
#  This file is part of BetterBib.
#
#  BetterBib is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Maelstrom is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Maelstrom.  If not, see <http://www.gnu.org/licenses/>.
#
'''
Parses a number of bibitems into a proper BibTeX bibliography.  Since bibitems
don't have semantic information, certain heuristics have to be applied.
'''

import argparse
import re


def _main():
    '''Extra
    '''
    args = _parse_args()
    bibitem_strings = extract_bibitems(args.input)
    for bibitem_string in bibitem_strings:
        bibitem = parse_bibitem_string(bibitem_string)
        write_bibtex_entry(bibitem)
        exit()
    return


def write_bibtex_entry(bibitem):
    print(bibitem)
    print('@article{%s,' % bibitem['key'])
    print('  author = %s,' % bibitem['authors'])
    print('  title = %s,' % bibitem['title'])
    print('}')
    return


def parse_bibitem_string(bibitem_string):
    '''Parses a bibitem given as (multiline) string and returns semantic
    information. Of course, heuristics are needed.
    '''
    # Extract the reference key
    re.DOTALL
    regex = re.compile('^\\\\bibitem{(\w+)}\s*(.*)', re.DOTALL)
    m = re.match(regex, bibitem_string)

    # Explode the rest of the string around commas, except the commas
    # are enclosed in curly brackets (e.g., in the authors list); see
    # <http://stackoverflow.com/a/26809170/353337>.
    m2 = re.split(',\s*(?![^{}]*\})', m.group(2))

    # Now the heuristics.
    bibitem = {
        'key': m.group(1),
        'authors': m2[0],
        'title': m2[1],
        'journal': m2[2],
        'number': m2[3],
        'pages': m2[4]
        }

    return bibitem


def extract_bibitems(filename):
    '''Parses `filename` and returns all bibitems from inside all
    `thebibliography` environments.
    '''
    recording = False
    bibitems = []
    with open(filename, 'r') as f:
        for line in f:
            # Get first non-whitespace character
            m = re.match('^\s*(\S)', line)
            # Skip commented-out lines
            if m and m.group(1) == '%':
                continue
            if '\\begin{thebibliography}' in line:
                recording = True
            if '\\end{thebibliography}' in line:
                recording = False

            if recording:
                if '\\bibitem' in line:
                    # Create new bibitem entry
                    bibitems.append(line)
                elif len(bibitems) > 0:
                    # Append to last bibitem entry
                    bibitems[-1] += line
    return bibitems


def _parse_args():
    parser = argparse.ArgumentParser(description='Extract bibitems.')
    parser.add_argument(
        'input',
        type=str,
        help='input LaTeX file'
        )
    parser.add_argument(
        'output',
        type=str,
        help='output BibTeX file'
        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
